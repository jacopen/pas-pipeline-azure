---
resource_types:
- name: azure-blobstore
  type: docker-image
  source:
    repository: pcfabr/azure-blobstore-resource

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: template
  type: git
  source:
    uri: https://github.com/pivotal-cf/terraforming-azure.git
    tag_filter: v0.40.0
- name: pas-pipeline-azure
  type: git
  source:
    uri: https://github.com/jacopen/pas-pipeline-azure.git
    branch: platform-automation
- name: terraform-state
  type: azure-blobstore
  source:
    storage_account_name: ((terraform_azure_storage_account_name))
    storage_account_key: ((terraform_azure_storage_access_key))
    container: ((azure_storage_container_name))
    versioned_file: terraform.tfstate
- name: pas
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: elastic-runtime
    product_version: 2\.5\..*
- name: stemcell
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: stemcells-ubuntu-xenial
    product_version: 250\..*
- name: platform-automation-tasks
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: platform-automation
    product_version: 3\.0\..*

- name: platform-automation-image
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: platform-automation
    product_version: 3\.0\..*

- name: auth
  type: azure-blobstore
  source:
    storage_account_name: ((terraform_azure_storage_account_name))
    storage_account_key: ((terraform_azure_storage_access_key))
    container: configs
    versioned_file: auth.yml
- name: env 
  type: azure-blobstore
  source:
    storage_account_name: ((terraform_azure_storage_account_name))
    storage_account_key: ((terraform_azure_storage_access_key))
    container: configs
    versioned_file: env.yml

- name: pasconfig
  type: azure-blobstore
  source:
    storage_account_name: ((terraform_azure_storage_account_name))
    storage_account_key: ((terraform_azure_storage_access_key))
    container: configs
    versioned_file: pas.yml

- name: vars
  type: azure-blobstore
  source:
    storage_account_name: ((terraform_azure_storage_account_name))
    storage_account_key: ((terraform_azure_storage_access_key))
    container: configs
    versioned_file: vars.yml
- name: cert
  type: azure-blobstore
  source:
    storage_account_name: ((terraform_azure_storage_account_name))
    storage_account_key: ((terraform_azure_storage_access_key))
    container: configs
    versioned_file: server.crt
- name: key
  type: azure-blobstore
  source:
    storage_account_name: ((terraform_azure_storage_account_name))
    storage_account_key: ((terraform_azure_storage_access_key))
    container: configs
    versioned_file: server.key
jobs:
- name: bootstrap-terraform-state
  build_logs_to_retain: 5
  serial: true
  plan:
  - task: create-terraform-state
    params:
      AZURE_STORAGE_ACCOUNT: ((terraform_azure_storage_account_name))
      AZURE_STORAGE_KEY: ((terraform_azure_storage_access_key))
      CONTAINER: ((azure_storage_container_name))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      run:
        path: sh
        args: 
        - -c
        - |
          set -ex
          
          blobs=$(az storage blob list -c ${CONTAINER})
          files=$(echo "$blobs" | jq -r .[].name)
          
          set +e
          echo ${files} | grep terraform.tfstate
          if [ "$?" -gt "0" ]; then
            echo "{\"version\": 3}" > terraform.tfstate
            az storage blob upload -c ${CONTAINER} -n terraform.tfstate -f terraform.tfstate
            set +x
            if [ "$?" -gt "0" ]; then
              echo "Failed to upload empty tfstate file"
              exit 1
            fi
            set -x
            az storage blob snapshot -c ${CONTAINER} -n terraform.tfstate
            set +x
            if [ "$?" -gt "0" ]; then
              echo "Failed to create snapshot of tfstate file"
              exit 1
            fi
          else
            echo "terraform.tfstate file found, skipping"
            exit 0
          fi

- name: pave-azure
  build_logs_to_retain: 5
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: tfstate-output/terraform.tfstate
  plan:
  - aggregate:
    - get: template
    - get: terraform-state
  - task: terraform-apply
    params:
      TFVARS: ((tfvars))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: hashicorp/terraform
          tag: 0.11.14
      inputs:
      - name: template
      - name: terraform-state
      outputs:
      - name: tfstate-output
      run:
        path: sh
        args: 
        - -c
        - |
          set -e
          cat <<EOF > terraform.tfvars
          ${TFVARS}
          EOF

          terraform init \
                    template/terraforming-pas
          terraform plan \
                    -var-file terraform.tfvars \
                    -out terraform.tfplan \
                    -state terraform-state/terraform.tfstate \
                    template/terraforming-pas
          terraform apply \
                    -state-out tfstate-output/terraform.tfstate \
                    terraform.tfplan
- name: create-vars
  plan:
  - get: terraform-state
    trigger: true
    passed: [pave-azure]
  - task: generate-json
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: hashicorp/terraform
          tag: 0.11.14
      inputs:
      - name: terraform-state
      outputs:
      - name: vars-json
      run:
        path: sh
        args: 
        - -c
        - |
          set -e
          cd terraform-state
          terraform output --json > ../vars-json/vars.json
          echo infrastructure_subnet_reserved_ip_ranges: $(terraform output infrastructure_subnet_cidrs | sed 's|0/.*$|2|g')-$(terraform output infrastructure_subnet_cidrs | sed 's|0/.*$|9|g') >> ../vars-json/ranges.yml
          echo pas_subnet_reserved_ip_ranges: $(terraform output pas_subnet_cidrs | sed 's|0/.*$|2|g')-$(terraform output pas_subnet_cidrs | sed 's|0/.*$|9|g') >> ../vars-json/ranges.yml
          echo services_subnet_reserved_ip_ranges: $(terraform output services_subnet_cidrs | sed 's|0/.*$|2|g')-$(terraform output services_subnet_cidrs | sed 's|0/.*$|9|g') >> ../vars-json/ranges.yml
  - task: convert-json2yaml
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: jacopen/yj
      inputs:
      - name: vars-json
      outputs:
      - name: vars-yaml
      run:
        path: sh
        args: 
        - -c
        - |
          set -e
          cat vars-json/vars.json | yj -jy > vars-yaml/vars.yml
          cat vars-json/ranges.yml >> vars-yaml/vars.yml
          cat vars-yaml/vars.yml
  - put: vars
    params:
      file: vars-yaml/vars.yml

- name: configure-authentication
  plan:
  - aggregate:
    - get: platform-automation-tasks
      params:
        globs:
        - platform-automation-tasks-*.zip
        unpack: true
    - get: platform-automation-image
      params:
        globs:
        - platform-automation-image-*.tgz
        unpack: true
    - get: terraform-state
      passed:
      - pave-azure
    - get: auth
    - get: env
  - task: configure
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    input_mapping:
      config: auth
      env: env

#- name: add-vm-types
#  build_logs_to_retain: 5
#  serial_groups: [terraform]
#  plan:
#  - aggregate:
#    - get: terraform-state
#      passed:
#      - configure-authentication
#      trigger: true
#  - task: add-vm-types
#    params:
#      OPS_MGR_USR: ((ops_mgr_usr))
#      OPS_MGR_PWD: ((ops_mgr_pwd))
#      DIRECTOR_VM_TYPE: ((director_vm_type))
#      OPS_MGR_TRUSTED_CERTS: ((ops_mgr_trusted_certs))
#    config:
#      platform: linux
#      image_resource:
#        type: docker-image
#        source:
#          repository: pcfnorm/rootfs
#          tag: 1.0.14
#      inputs:
#      - name: terraform-state
#      caches:
#      - path: downloads 
#      run:
#        path: bash
#        args: 
#        - -c
#        - |
#          set -eu
#          cp /usr/local/bin/om-linux /usr/local/bin/om
#          cp terraform-state/terraform.tfstate ./
#          cd downloads
#          if [ ! -f ./yq ];then
#            curl -Lo ./yq https://github.com/mikefarah/yq/releases/download/1.15.0/yq_linux_amd64
#          fi
#          if [ ! -f ./bosh ];then
#            curl -Lo ./bosh https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli-3.0.1-linux-amd64
#          fi
#          cd -
#          install ./downloads/yq /usr/local/bin/yq
#          install ./downloads/bosh /usr/local/bin/bosh
#
#          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
#
#          om --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
#             --skip-ssl-validation \
#             --username "$OPS_MGR_USR" \
#             --password "$OPS_MGR_PWD" \
#             curl \
#             --silent \
#             --path /api/v0/vm_types > vm_types.json
#
#          cat <<EOF > ops.yml
#          - type: replace
#            path: /vm_types/name=Standard_DS1_v2?
#            value: 
#              cpu: 1
#              ephemeral_disk: 51200
#              name: Standard_DS1_v2
#              ram: 4096
#          - type: replace
#            path: /vm_types/name=Standard_DS2_v2?
#            value: 
#              cpu: 2
#              ephemeral_disk: 102400
#              name: Standard_DS2_v2
#              ram: 8192
#          - type: replace
#            path: /vm_types/name=Standard_B1s?
#            value: 
#              cpu: 1
#              ephemeral_disk: 4096
#              name: Standard_B1s
#              ram: 1024
#          - type: replace
#            path: /vm_types/name=Standard_B1ms?
#            value: 
#              cpu: 1
#              ephemeral_disk: 4096
#              name: Standard_B1ms
#              ram: 2048
#          - type: replace
#            path: /vm_types/name=Standard_B2s?
#            value: 
#              cpu: 2
#              ephemeral_disk: 8192
#              name: Standard_B2s
#              ram: 4096
#          EOF
#
#          bosh int vm_types.json | yq r - -j | jq . > vm_types_old.json
#          bosh int vm_types.json -o ops.yml | yq r - -j | jq . > vm_types_new.json
#
#          diff vm_types_old.json vm_types_new.json | cat
#
#          om --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
#             --skip-ssl-validation \
#             --username "$OPS_MGR_USR" \
#             --password "$OPS_MGR_PWD" \
#             curl \
#             --silent \
#             --request PUT \
#             --path /api/v0/vm_types \
#             --data "$(cat vm_types_new.json)"
- name: create-self-signed-certificate
  plan:
  - get: vars
    passed: [create-vars]
    trigger: true
  - get: env
  - get: platform-automation-image
    params:
      globs:
      - platform-automation-image-*.tgz
      unpack: true
  - task: generate-certificate
    image: platform-automation-image
    config:
      platform: linux
      inputs:
      - name: vars
      - name: env
      outputs:
      - name: cert-json
      params:
        ENV_FILE: env.yml
      run:
        path: bash
        args:
        - "-c"
        - |
          set -eux
          SYS_DOMAIN=$(cat vars/vars.yml | grep sys_domain -A 3 | grep value | awk '{print $2}')
          APPS_DOMAIN=$(cat vars/vars.yml | grep apps_domain -A 3 | grep value | awk '{print $2}')
          om --env env/"${ENV_FILE}" generate-certificate --domains "*.$SYS_DOMAIN,*.$APPS_DOMAIN" > cert-json/cert.json
  - task: parse-certificate
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: jacopen/yj
      inputs:
      - name: vars
      - name: env
      - name: cert-json
      outputs:
      - name: outputs
      run:
        path: sh
        args:
        - "-c"
        - |
          set -eux
          cat cert-json/cert.json | jq -r .certificate > outputs/server.crt
          cat cert-json/cert.json | jq -r .key > outputs/server.key
          KEY=$(cat outputs/server.key)
          CERT=$(cat outputs/server.crt)
          cat vars/vars.yml | yj -yj | jq ". |= .+ {\"cert_pem\": \"$CERT\"}" | jq ". |= .+ {\"private_key_pem\": \"$KEY\"}" | yj -jy > outputs/vars.yml
  - put: cert
    params:
      file: outputs/server.crt 
  - put: key
    params:
      file: outputs/server.key
  - put: vars
    params:
      file: outputs/vars.yml


- name: configure-director
  plan:
  - aggregate:
    - get: platform-automation-tasks
      params:
        globs:
        - platform-automation-tasks-*.zip
        unpack: true
    - get: platform-automation-image
      params:
        globs:
        - platform-automation-image-*.tgz
        unpack: true
    - get: terraform-state
      passed:
      - configure-authentication
    - get: pas-pipeline-azure
    - get: env
    - get: vars
  - task: configure
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    params:
      VARS_FILES: vars/vars.yml
      DIRECTOR_CONFIG_FILE: templates/director.yml
    input_mapping:
      config: pas-pipeline-azure
      env: env
      vars: vars

- name: show-ssh-opsman-script
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - configure-director
#      trigger: true
  - task: show-ssh-opsman-script
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
          tag: 1.0.14
      inputs:
      - name: terraform-state
      run:
        path: bash
        args: 
        - -c
        - |
          set -e
          cp /usr/local/bin/om-linux /usr/local/bin/om
          cp terraform-state/terraform.tfstate ./
          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
          OPS_MANAGER_SSH_PRIVATE_KEY=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ssh_private_key.value')
          
          cat <<EOF
          #!/bin/bash
          cat << KEY > opsman.pem
          ${OPS_MANAGER_SSH_PRIVATE_KEY}
          KEY
          ssh -i opsman.pem -o "StrictHostKeyChecking=no" -l ubuntu ${OPSMAN_DOMAIN_OR_IP_ADDRESS}
          EOF

- name: upload-pas
  plan:
  - aggregate:
    - get: platform-automation-tasks
      params:
        globs:
        - platform-automation-tasks-*.zip
        unpack: true
    - get: platform-automation-image
      params:
        globs:
        - platform-automation-image-*.tgz
        unpack: true
    - get: pas
    - get: env
    - get: terraform-state
      passed: ["configure-director"]
  - task: upload
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas
      env: env

- name: config-pas
  plan:
  - aggregate:
    - get: platform-automation-tasks
      params:
        globs:
        - platform-automation-tasks-*.zip
        unpack: true
    - get: platform-automation-image
      params:
        globs:
        - platform-automation-image-*.tgz
        unpack: true
    - get: pas
    - get: env
    - get: pasconfig
    - get: terraform-state
      passed: ["upload-pas"]
  - task: configure
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: pas.yml
    input_mapping:
      config: pasconfig
      env: env
#- name: config-pas
#  build_logs_to_retain: 5
#  plan:
#  - aggregate:
#    - get: terraform-state
#      passed:
#      - upload-pas
#      trigger: true
#    - get: pcf-pipelines
#    - get: pas
#      passed:
#      - upload-pas
#      params:
#        globs: 
#        - "cf-cli-*"
#      trigger: true
#  - task: config-pas
#    params:
#      OPS_MGR_USR: ((ops_mgr_usr))
#      OPS_MGR_PWD: ((ops_mgr_pwd))
#      OPSMAN_CLIENT_ID: ""
#      OPSMAN_CLIENT_SECRET: ""
#      SMTP_FROM: ((smtp_from))
#      SMTP_ADDRESS: ((smtp_address)) 
#      SMTP_PORT: ((smtp_port))
#      SMTP_USERNAME: ((smtp_username))
#      SMTP_PASSWORD: ((smtp_password))
#      SMTP_ENABLE_STARTTLS: ((smtp_enable_starttls))
#      CLOUDFLARE_API_KEY: ((cloudflare_api_key))
#      PRODUCT_NAME: "cf"
#    config:
#      platform: linux
#      image_resource:
#        type: docker-image
#        source:
#          repository: pcfnorm/rootfs
#          tag: 1.0.14
#      inputs:
#      - name: terraform-state
#      - name: pcf-pipelines
#      - name: pas
#      run:
#        path: bash
#        args: 
#        - -c
#        - |
#          set -e
#          cp /usr/local/bin/om-linux /usr/local/bin/om
#          cp terraform-state/terraform.tfstate ./
#          
#          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
#
#          source pcf-pipelines/functions/generate_cert.sh
#
#          if [ "${CLOUDFLARE_API_KEY}" = "" ];then
#            WEB_LB_IP=$(cat terraform-state/terraform.tfstate | jq -r '.modules[] | select(.path[1] == "pas") | .resources["azurerm_public_ip.web-lb-public-ip"].primary.attributes.ip_address')
#            SSH_LB_IP=$(cat terraform-state/terraform.tfstate | jq -r '.modules[] | select(.path[1] == "pas") | .resources["azurerm_public_ip.diego-ssh-lb-public-ip"].primary.attributes.ip_address')
#            TCP_LB_IP=$(cat terraform-state/terraform.tfstate | jq -r '.modules[] | select(.path[1] == "pas") | .resources["azurerm_public_ip.tcp-lb-public-ip"].primary.attributes.ip_address')
#            SYSTEM_DOMAIN=sys.$(echo $WEB_LB_IP | tr '.' '-').sslip.io
#            APPS_DOMAIN=apps.$(echo $WEB_LB_IP | tr '.' '-').sslip.io
#          else
#            SYSTEM_DOMAIN=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.sys_domain.value')
#            APPS_DOMAIN=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.apps_domain.value')
#          fi
#          CERTIFICATES=$(generate_cert "*.$APPS_DOMAIN *.$SYSTEM_DOMAIN *.uaa.$SYSTEM_DOMAIN *.login.$SYSTEM_DOMAIN")
#          PAS_CERT_PEM=`echo $CERTIFICATES | jq -r '.certificate' | sed 's/^/          /'`
#          PAS_PRIVATE_KEY_PEM=`echo $CERTIFICATES | jq -r '.key' | sed 's/^/          /'`
#          OPS_MGR_CA_CERT_PEM=$(om --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
#                 --username "$OPS_MGR_USR" \
#                 --password "$OPS_MGR_PWD" \
#                 --skip-ssl-validation \
#                 curl \
#                 --silent \
#                 --path /api/v0/certificate_authorities \
#                 | jq -r '.certificate_authorities[0].cert_pem' \
#                 | sed 's/^/        /')
#          SAML_CERT=$(generate_cert "*.$SYSTEM_DOMAIN *.uaa.$SYSTEM_DOMAIN *.login.$SYSTEM_DOMAIN")
#          SAML_CERT_PEM=`echo $SAML_CERT | jq -r '.certificate' | sed 's/^/        /'`
#          SAML_PRIVATE_KEY_PEM=`echo $SAML_CERT | jq -r '.key' | sed 's/^/        /'`
#          MYSQL_LB_IP=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].resources["azurerm_lb.mysql"].primary.attributes.private_ip_address')
#          AZURE_STORAGE_ACCOUNT_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.cf_storage_account_name.value')
#          AZURE_STORAGE_ACCESS_KEY=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.cf_storage_account_access_key.value')
#          AZURE_STORAGE_BUILDPACKS_CONTAINER=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.cf_buildpacks_storage_container.value')
#          AZURE_STORAGE_DROPLETS_CONTAINER=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.cf_droplets_storage_container.value')
#          AZURE_STORAGE_PACKAGES_CONTAINER=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.cf_packages_storage_container.value')
#          AZURE_STORAGE_RESOURCES_CONTAINER=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.cf_resources_storage_container.value')
#          WEB_LB_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.web_lb_name.value')
#          SSH_LB_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.diego_ssh_lb_name.value')
#          MYSQL_LB_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.mysql_lb_name.value')
#          TCP_LB_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.tcp_lb_name.value')
#
#          cat <<EOF > config.yml
#          ---
#          product-properties:
#            .cloud_controller.system_domain:
#              value: $SYSTEM_DOMAIN
#            .cloud_controller.apps_domain:
#              value: $APPS_DOMAIN
#            .properties.routing_tls_termination:
#              value: ha_proxy # Azure
#            .properties.haproxy_forward_tls:
#              value: enable
#            .properties.haproxy_forward_tls.enable.backend_ca:
#              value: |
#          $OPS_MGR_CA_CERT_PEM
#            .properties.networking_poe_ssl_certs:
#              value:
#              - name: pas-wildcard
#                certificate:
#                  cert_pem: |
#          $PAS_CERT_PEM
#                  private_key_pem: |
#          $PAS_PRIVATE_KEY_PEM
#            .ha_proxy.skip_cert_verify:
#              value: true
#            .router.frontend_idle_timeout: # By default, Azure load balancer times out at 240 seconds without sending a TCP RST to clients, so as an exception, Pivotal recommends a value lower than 240 to force the load balancer to send the TCP RST.
#              value: 239
#            .properties.security_acknowledgement:
#              value: X
#            .properties.secure_service_instance_credentials:
#              value: true
#            .properties.cf_networking_enable_space_developer_self_service:
#              value: true
#            .uaa.service_provider_key_credentials:
#              value:
#                cert_pem: |
#          $SAML_CERT_PEM
#                private_key_pem: |
#          $SAML_PRIVATE_KEY_PEM
#            .properties.credhub_key_encryption_passwords:
#              value: 
#              - name: key1
#                key: 
#                  secret: credhubsecret1credhubsecret1
#                primary: true
#            .mysql_proxy.service_hostname:
#              value: $MYSQL_LB_IP
#            .mysql_monitor.recipient_email:
#              value: notify@example.com
#            .properties.system_blobstore:
#              value: external_azure
#            .properties.system_blobstore.external_azure.account_name:
#              value: $AZURE_STORAGE_ACCOUNT_NAME
#            .properties.system_blobstore.external_azure.access_key:
#              value: 
#                secret: "$AZURE_STORAGE_ACCESS_KEY"
#            .properties.system_blobstore.external_azure.buildpacks_container:
#              value: $AZURE_STORAGE_BUILDPACKS_CONTAINER
#            .properties.system_blobstore.external_azure.droplets_container:
#              value: $AZURE_STORAGE_DROPLETS_CONTAINER
#            .properties.system_blobstore.external_azure.packages_container:
#              value: $AZURE_STORAGE_PACKAGES_CONTAINER
#            .properties.system_blobstore.external_azure.resources_container:
#              value: $AZURE_STORAGE_RESOURCES_CONTAINER
#            .properties.autoscale_instance_count:
#              value: 1
#            .properties.smtp_from:
#              value: $SMTP_FROM
#            .properties.smtp_address:
#              value: $SMTP_ADDRESS
#            .properties.smtp_port:
#              value: $SMTP_PORT
#            .properties.smtp_credentials:
#              value:
#                identity: $SMTP_USERNAME
#                password: $SMTP_PASSWORD
#            .properties.smtp_enable_starttls_auto:
#              value: $SMTP_ENABLE_STARTTLS
#            .properties.stack_migration_acknowledgement:
#              value: X
#          network-properties:
#            network:
#              name: deployment
#            other_availability_zones:
#            - name: zone-1
#            singleton_availability_zone:
#              name: zone-1
#          resource-config:
#            nats:
#              instances: 1
#            mysql_proxy:
#              instances: 1
#              elb_names:
#              - $MYSQL_LB_NAME
#            mysql:
#              instances: 1
#              instance_type:
#                id: Standard_F2s
#              persistent_disk:
#                size_mb: "10240"
#            backup_restore:
#              instances: 0
#            diego_database:
#              instances: 1
#            uaa:
#              instances: 1
#              instance_type:
#                id: Standard_DS1_v2
#            cloud_controller:
#              instances: 1
#            ha_proxy:
#              instances: 0
#            router:
#              instances: 1
#              elb_names:
#              - $WEB_LB_NAME
#            mysql_monitor:
#              instances: 0
#            clock_global:
#              instances: 1
#            cloud_controller_worker:
#              instances: 1
#            diego_brain:
#              instances: 1
#              elb_names:
#              - $SSH_LB_NAME
#            diego_cell:
#              instances: 1
#              instance_type:
#                id: Standard_DS11_v2
#            loggregator_trafficcontroller:
#              instances: 1
#            syslog_adapter:
#              instances: 1
#            syslog_scheduler:
#              instances: 1
#            doppler:
#              instances: 1
#              instance_type:
#                id: Standard_DS1_v2
#            tcp_router:
#              instances: 0
#            #   elb_names:
#            #   - $TCP_LB_NAME
#            credhub:
#              instances: 0
#          EOF
#
#          cat config.yml
#
#          om --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
#             --username "$OPS_MGR_USR" \
#             --password "$OPS_MGR_PWD" \
#             --skip-ssl-validation \
#             configure-product \
#             --product-name "${PRODUCT_NAME}" \
#             --config config.yml
#
#          # Errands
#          for e in \
#            push-usage-service \
#            push-apps-manager \
#            deploy-notifications \
#            deploy-notifications-ui \
#            deploy-autoscaler \
#            test-autoscaling \
#            nfsbrokerpush \
#            ;do
#            om --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
#             --username "$OPS_MGR_USR" \
#             --password "$OPS_MGR_PWD" \
#             --skip-ssl-validation \
#             set-errand-state \
#             --product-name "${PRODUCT_NAME}" \
#             --errand-name="${e}" \
#             --post-deploy-state=when-changed
#          done
- name: upload-stemcell
  plan:
  - aggregate:
    - get: platform-automation-tasks
      params:
        globs:
        - platform-automation-tasks-*.zip
        unpack: true
    - get: platform-automation-image
      params:
        globs:
        - platform-automation-image-*.tgz
        unpack: true
    - get: terraform-state
      passed:
      - configure-director
    - get: stemcell
    - get: env
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      stemcell: stemcell
      env: env

- name: apply-changes
  plan:
  - aggregate:
    - get: platform-automation-tasks
      params:
        globs:
        - platform-automation-tasks-*.zip
        unpack: true
    - get: platform-automation-image
      params:
        globs:
        - platform-automation-image-*.tgz
        unpack: true
    - get: terraform-state
      passed:
      - config-pas
      - upload-stemcell
    - get: env
  - task: apply-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: env

- name: wipe-env
  build_logs_to_retain: 5
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: tfstate-output/terraform.tfstate
  plan:
  - aggregate:
    - get: template
    - get: terraform-state
      passed:
      - configure-authentication
  - task: delete-installation
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
          tag: 1.0.14
      inputs:
      - name: terraform-state
      - name: pcf-pipelines
      run:
        path: bash
        args: 
        - -c
        - |
          set +e  
          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
          om-linux \
            --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
            --skip-ssl-validation \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            --request-timeout 60 \
            delete-installation
  - task: terraform-destory
    params:
      TFVARS: ((tfvars))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: hashicorp/terraform
          tag: 0.11.14
      inputs:
      - name: template
      - name: terraform-state
      outputs:
      - name: tfstate-output
      run:
        path: sh
        args: 
        - -c
        - |
          set -e
          cat <<EOF > terraform.tfvars
          ${TFVARS}
          EOF
          terraform init \
                    template
          terraform destroy \
                    -force \
                    -state terraform-state/terraform.tfstate \
                    -state-out tfstate-output/terraform.tfstate \
                    template

- name: show-cf-login-as-admin
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - config-pas
  - task: show-cf-login-as-admin
    params:
      PIVNET_API_TOKEN: ((pivnet_api_token))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      CLOUDFLARE_API_KEY: ((cloudflare_api_key))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
          tag: 1.0.14
      inputs:
      - name: terraform-state
      run:
        path: bash
        args: 
        - -c
        - |
          set -e
          cp /usr/local/bin/om-linux /usr/local/bin/om
          cp terraform-state/terraform.tfstate ./
          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
          if [ "${CLOUDFLARE_API_KEY}" = "" ];then
            WEB_LB_IP=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].resources["azurerm_public_ip.web-lb-public-ip"].primary.attributes.ip_address')
            SYSTEM_DOMAIN=sys.$(echo $WEB_LB_IP | tr '.' '-').sslip.io
          else
            SYSTEM_DOMAIN=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.sys_domain.value')
          fi
          
          PRODUCT_GUID=$(om \
                --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
                --username "$OPS_MGR_USR" \
                --password "$OPS_MGR_PWD" \
                --skip-ssl-validation \
                curl \
                --silent \
                --path "/api/v0/staged/products" \
                -x GET \
                | jq -r '.[] | select(.type == "cf") | .guid')
          ADMIN_CREDENTIALS=$(om \
                --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
                --username "$OPS_MGR_USR" \
                --password "$OPS_MGR_PWD" \
                --skip-ssl-validation \
                curl \
                --silent \
                --path "/api/v0/deployed/products/${PRODUCT_GUID}/credentials/.uaa.admin_credentials" \
                -x GET \
                | jq -r '.credential.value.password')

          cat <<EOF
          cf login --skip-ssl-validation -a api.${SYSTEM_DOMAIN} -u admin -p ${ADMIN_CREDENTIALS} 
          EOF

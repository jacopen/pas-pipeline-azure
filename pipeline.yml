---
resource_types:
- name: azure-blobstore
  type: docker-image
  source:
    repository: czero/azure-blobstore-resource

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: template
  type: git
  source:
    uri: https://github.com/pivotal-cf/terraforming-azure.git
    tag_filter: v0.12.0
- name: terraform-state
  type: azure-blobstore
  source:
    storage_account_name: ((terraform_azure_storage_account_name))
    storage_account_key: ((terraform_azure_storage_access_key))
    container: ((azure_storage_container_name))
    versioned_file: terraform.tfstate
- name: pas
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: elastic-runtime
    product_version: 2\.1\.*
# - name: stemcell
#   type: pivnet
#   source:
#     api_token: ((pivnet_api_token))
#     product_slug: stemcells
#     product_version: 3468\.*

jobs:
- name: bootstrap-terraform-state
  build_logs_to_retain: 5
  serial: true
  plan:
  - task: create-terraform-state
    params:
      AZURE_STORAGE_ACCOUNT: ((terraform_azure_storage_account_name))
      AZURE_STORAGE_KEY: ((terraform_azure_storage_access_key))
      CONTAINER: ((azure_storage_container_name))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
          tag: 1.0.14
      run:
        path: bash
        args: 
        - -c
        - |
          # https://github.com/pivotal-cf/pcf-pipelines/blob/v0.23.4/install-pcf/azure/tasks/create-initial-terraform-state/task.sh
          blobs=$(az storage blob list -c ${CONTAINER})
          files=$(echo "$blobs" | jq -r .[].name)

          set +e
          echo ${files} | grep terraform.tfstate
          if [ "$?" -gt "0" ]; then
            echo "{\"version\": 3}" > terraform.tfstate
            az storage blob upload -c ${CONTAINER} -n terraform.tfstate -f terraform.tfstate
            set +x
            if [ "$?" -gt "0" ]; then
              echo "Failed to upload empty tfstate file"
              exit 1
            fi
            set -x
            az storage blob snapshot -c ${CONTAINER} -n terraform.tfstate
            set +x
            if [ "$?" -gt "0" ]; then
              echo "Failed to create snapshot of tfstate file"
              exit 1
            fi
          else
            echo "terraform.tfstate file found, skipping"
            exit 0
          fi

- name: pave-azure
  build_logs_to_retain: 5
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: tfstate-output/terraform.tfstate
  plan:
  - aggregate:
    - get: template
    - get: terraform-state
  - task: terraform-apply
    params:
      TFVARS: ((tfvars))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: hashicorp/terraform
          tag: light
      inputs:
      - name: template
      - name: terraform-state
      outputs:
      - name: tfstate-output
      run:
        path: sh
        args: 
        - -c
        - |
          set -e
          cat <<EOF > terraform.tfvars
          ${TFVARS}
          EOF
          terraform init \
                    template
          terraform plan \
                    -var-file terraform.tfvars \
                    -out terraform.tfplan \
                    -state terraform-state/terraform.tfstate \
                    template
          terraform apply \
                    -state-out tfstate-output/terraform.tfstate \
                    terraform.tfplan

- name: config-authentication
  build_logs_to_retain: 5
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - pave-azure
      trigger: true
  - task: config-director
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      OM_DECRYPTION_PWD: ((om_decryption_pwd))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
          tag: 1.0.14
      inputs:
      - name: terraform-state
      run:
        path: bash
        args: 
        - -c
        - |
          set -eu          
          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
          echo "OSPMAN: https://$OPSMAN_DOMAIN_OR_IP_ADDRESS"
          until $(curl --output /dev/null -k --silent --head --fail https://$OPSMAN_DOMAIN_OR_IP_ADDRESS/setup); do
              printf '.'
              sleep 5
          done

          om-linux \
            --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
            --skip-ssl-validation \
            configure-authentication \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            --decryption-passphrase $OM_DECRYPTION_PWD

- name: config-director
  build_logs_to_retain: 5
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - config-authentication
      trigger: true
  - task: config-director
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      DIRECTOR_VM_TYPE: ((director_vm_type))
      INTERNET_CONNECTED: ((internet_connected))
      OPS_MGR_TRUSTED_CERTS: ((ops_mgr_trusted_certs))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
          tag: 1.0.14
      inputs:
      - name: terraform-state
      run:
        path: bash
        args: 
        - -c
        - |
          set -eu
          cp /usr/local/bin/om-linux /usr/local/bin/om
          cp terraform-state/terraform.tfstate ./
          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
          SUBSCRIPTION_ID=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.subscription_id.value')
          TENANT_ID=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.tenant_id.value')
          CLIENT_ID=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.client_id.value')
          CLIENT_SECRET=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.client_secret.value')
          RESOURCE_GROUP_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.pcf_resource_group_name.value')
          BOSH_STORAGE_ACCOUNT_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.bosh_root_storage_account.value')
          DEPLOYMENTS_STORAGE_ACCOUNT_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.wildcard_vm_storage_account.value')
          DEFAULT_SECURITY_GROUP=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.bosh_deployed_vms_security_group_name.value')
          OPS_MANAGER_SSH_PUBLIC_KEY=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ssh_public_key.value' | sed 's/^/        /')
          OPS_MANAGER_SSH_PRIVATE_KEY=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ssh_private_key.value' | sed 's/^/        /')
          NETWORK_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.network_name.value')
          MANAGEMENT_SUBNET_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.management_subnet_name.value')
          MANAGEMENT_SUBNET_CIDRS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.management_subnet_cidrs.value[0]')
          MANAGEMENT_SUBNET_GATEWAY=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.management_subnet_gateway.value')
          MANAGEMENT_RESERVED_IP_RANGES="$(echo $MANAGEMENT_SUBNET_CIDRS | sed 's|0/26$|1|g')-$(echo $MANAGEMENT_SUBNET_CIDRS | sed 's|0/26$|9|g')"
          PAS_SUBNET_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.pas_subnet_name.value')
          PAS_SUBNET_CIDRS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.pas_subnet_cidrs.value[0]')
          PAS_SUBNET_GATEWAY=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.pas_subnet_gateway.value')
          PAS_RESERVED_IP_RANGES="$(echo $PAS_SUBNET_CIDRS | sed 's|0/22$|1|g')-$(echo $PAS_SUBNET_CIDRS | sed 's|0/22$|9|g')"
          SERVICES_SUBNET_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.services_subnet_name.value')
          SERVICES_SUBNET_CIDRS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.services_subnet_cidrs.value[0]')
          SERVICES_SUBNET_GATEWAY=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.services_subnet_gateway.value')
          SERVICES_RESERVED_IP_RANGES="$(echo $SERVICES_SUBNET_CIDRS | sed 's|0/22$|1|g')-$(echo $SERVICES_SUBNET_CIDRS | sed 's|0/22$|9|g')"

          cat <<EOF > config.yml
          iaas-configuration:
            subscription_id: $SUBSCRIPTION_ID
            tenant_id: $TENANT_ID
            client_id: $CLIENT_ID
            client_secret: $CLIENT_SECRET
            resource_group_name: $RESOURCE_GROUP_NAME
            bosh_storage_account_name: $BOSH_STORAGE_ACCOUNT_NAME
            cloud_storage_type: storage_accounts
            deployments_storage_account_name:  "$DEPLOYMENTS_STORAGE_ACCOUNT_NAME"
            # cloud_storage_type: managed_disks
            # storage_account_type: Standard_LRS
            default_security_group: $DEFAULT_SECURITY_GROUP
            ssh_public_key: |
          $OPS_MANAGER_SSH_PUBLIC_KEY
            ssh_private_key: |
          $OPS_MANAGER_SSH_PRIVATE_KEY
            environment: AzureCloud
          director-configuration:
            ntp_servers_string: "0.pool.ntp.org"
            resurrector_enabled: true
            post_deploy_enabled: true
            database_type: internal
            blobstore_type: local

          networks-configuration:
            icmp_checks_enabled: false
            networks:
            - name: Management
              subnets:
              - iaas_identifier: $NETWORK_NAME/$MANAGEMENT_SUBNET_NAME
                cidr: $MANAGEMENT_SUBNET_CIDRS
                reserved_ip_ranges: $MANAGEMENT_RESERVED_IP_RANGES
                dns: "168.63.129.16"
                gateway: $MANAGEMENT_SUBNET_GATEWAY
            - name: Deployment
              subnets:
              - iaas_identifier: $NETWORK_NAME/$PAS_SUBNET_NAME
                cidr: $PAS_SUBNET_CIDRS
                reserved_ip_ranges: $PAS_RESERVED_IP_RANGES
                dns: "168.63.129.16"
                gateway: $PAS_SUBNET_GATEWAY
            - name: Services
              subnets:
              - iaas_identifier: $NETWORK_NAME/$SERVICES_SUBNET_NAME
                cidr: $SERVICES_SUBNET_CIDRS
                reserved_ip_ranges: $SERVICES_RESERVED_IP_RANGES
                dns: "168.63.129.16"
                gateway: $SERVICES_SUBNET_GATEWAY
          network-assignment:
            network:
              name: Management
          security-configuration:
            trusted_certificates: "$OPS_MGR_TRUSTED_CERTS"
            vm_password_type: generate
          resource-configuration:
            director:
              instance_type:
                id: $DIRECTOR_VM_TYPE
              internet_connected: $INTERNET_CONNECTED
            compilation:
              instance_type:
                id: automatic
              internet_connected: $INTERNET_CONNECTED
          EOF

          cat config.yml

          om --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
             --skip-ssl-validation \
             --username "$OPS_MGR_USR" \
             --password "$OPS_MGR_PWD" \
             configure-director \
             --config config.yml

- name: deploy-director
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - config-director
      trigger: true
  - task: apply-changes
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      <<: *APPLY_CHANGES
- name: configure-bosh-cli
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - deploy-director
      trigger: true
  - task: configure-bosh-cli
    params:
      PIVNET_API_TOKEN: ((pivnet_api_token))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
          tag: 1.0.14
      inputs:
      - name: terraform-state
      run:
        path: bash
        args: 
        - -c
        - |
          set -e
          cp /usr/local/bin/om-linux /usr/local/bin/om
          cp terraform-state/terraform.tfstate ./
          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
          OPS_MANAGER_SSH_PRIVATE_KEY=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ssh_private_key.value')
          
          cat <<EOF > opsman.pem
          ${OPS_MANAGER_SSH_PRIVATE_KEY}
          EOF
          chmod 400 opsman.pem

          GUID=$(om \
                --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
                --username "$OPS_MGR_USR" \
                --password "$OPS_MGR_PWD" \
                --skip-ssl-validation \
                curl \
                --silent \
                --path "/api/v0/staged/products" \
                -x GET \
                | jq -r '.[] | select(.type == "p-bosh") | .guid')
          BOSH_CLI=$(om \
                --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
                --username "$OPS_MGR_USR" \
                --password "$OPS_MGR_PWD" \
                --skip-ssl-validation \
                curl \
                --silent \
                --path "/api/v0/deployed/director/credentials/bosh_commandline_credentials" \
                -x GET \
                | jq -r '.credential')

          ssh -q -i opsman.pem \
            -o "StrictHostKeyChecking=no" \
            ubuntu@${OPSMAN_DOMAIN_OR_IP_ADDRESS} "echo $BOSH_CLI | sed 's/ /\n/g' | sed 's/^/export /g' | sed '/bosh/d' | sudo tee /etc/profile.d/bosh.sh" > /dev/null
            
- name: upload-pas
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - deploy-director
      trigger: true
    - get: pas
      params:
        globs: 
        - "cf-cli-*" # not downloading .pivotal file
  - task: upload-pas
    params:
      PIVNET_API_TOKEN: ((pivnet_api_token))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
          tag: 1.0.14
      inputs:
      - name: terraform-state
      - name: pas
      run:
        path: bash
        args: 
        - -c
        - |
          set -e

          RELEASE_ID=`cat pas/metadata.json | jq -r '.Release.ID'`
          PRODUCT_ID=`cat pas/metadata.json | jq -r '.ProductFiles | map(select(.File == "Pivotal Application Service"))[0].ID'`
          AWS_OBJECT_KEY=`cat pas/metadata.json | jq -r '.ProductFiles | map(select(.File == "Pivotal Application Service"))[0].AWSObjectKey'`
          SHA256=`cat pas/metadata.json | jq -r '.ProductFiles | map(select(.File == "Pivotal Application Service"))[0].SHA256'`
          FILENAME=`basename ${AWS_OBJECT_KEY}`
          DOWNLOAD_URL="https://network.pivotal.io/api/v2/products/elastic-runtime/releases/${RELEASE_ID}/product_files/${PRODUCT_ID}/download"

          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
          OPS_MANAGER_SSH_PRIVATE_KEY=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ssh_private_key.value')

          cat <<EOF > opsman.pem
          ${OPS_MANAGER_SSH_PRIVATE_KEY}
          EOF
          chmod 400 opsman.pem

          cat <<EOF > /etc/ssh/ssh_config
          ServerAliveInterval 60
          ServerAliveCountMax 10
          StrictHostKeyChecking no
          EOF

          set +e
          SHA256SUM=`ssh -q -i opsman.pem \
              ${OPSMAN_DOMAIN_OR_IP_ADDRESS} \
              -l ubuntu \
              "sha256sum ${FILENAME}" | awk '{print $1}'`
          set -e
          echo ${SHA256SUM}
          echo ${SHA256}
          if [ "${SHA256SUM}" = "${SHA256}" ];then
            echo "${FILENAME} exists"
          else
            echo "Downloading ${FILENAME} from ${DOWNLOAD_URL} on OspMamager"
            ssh -q -i opsman.pem \
              ${OPSMAN_DOMAIN_OR_IP_ADDRESS} \
              -l ubuntu \
              "wget -q -O "${FILENAME}" --header='Authorization: Token ${PIVNET_API_TOKEN}' ${DOWNLOAD_URL}"
          fi


- name: wipe-env
  build_logs_to_retain: 5
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: tfstate-output/terraform.tfstate
  plan:
  - aggregate:
    - get: template
    - get: terraform-state
      passed:
      - config-authentication
      #trigger: true
  - task: delete-installation
    params:
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
          tag: 1.0.14
      inputs:
      - name: terraform-state
      run:
        path: bash
        args: 
        - -c
        - |
          set +e  
          OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
          om-linux \
            --target https://$OPSMAN_DOMAIN_OR_IP_ADDRESS \
            --skip-ssl-validation \
            --username "$OPS_MGR_USR" \
            --password "$OPS_MGR_PWD" \
            --request-timeout 900 \
            delete-installation
  - task: terraform-destory
    params:
      TFVARS: ((tfvars))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: hashicorp/terraform
          tag: light
      inputs:
      - name: template
      - name: terraform-state
      outputs:
      - name: tfstate-output
      run:
        path: sh
        args: 
        - -c
        - |
          set -e
          cat <<EOF > terraform.tfvars
          ${TFVARS}
          EOF
          terraform init \
                    template
          terraform destroy \
                    -force \
                    -state terraform-state/terraform.tfstate \
                    -state-out tfstate-output/terraform.tfstate \
                    template

params: 
  apply-changes: &APPLY_CHANGES
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: pcfnorm/rootfs
        tag: 1.0.14
    inputs:
    - name: terraform-state
    run:
      path: bash
      args: 
      - -c
      - |
        set -eu
        OPSMAN_DOMAIN_OR_IP_ADDRESS=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.ops_manager_ip.value')
        echo "Applying changes on Ops Manager @ ${OPSMAN_DOMAIN_OR_IP_ADDRESS}"

        om-linux \
          --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
          --skip-ssl-validation \
          --username "${OPS_MGR_USR}" \
          --password "${OPS_MGR_PWD}" \
          apply-changes \
          --ignore-warnings
